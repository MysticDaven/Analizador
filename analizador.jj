options {
Ignore_Case = false;
STATIC=false;   
DEBUG_PARSER=false;
DEBUG_LOOKAHEAD=false;
}

PARSER_BEGIN (Analizador)
/** Analizador */

import java.util.*;
    public class Analizador {
        static Hashtable<String, Elemento> ts = new Hashtable<String, Elemento>();
        static int cont=0;
        static  Elemento ele;
        static boolean comp = true;
        static String vAux;

        public static void main(String[] args) throws ParseException{
            Analizador anLex = new Analizador (System.in);      
            anLex.inicio();
            for(int i=0;i<cont;i++){
                System.out.println("Tabla: "+i+", ID= "+ts.get("Var"+i).id+", Categoria: "+ts.get("Var"+i).categoria+ ", Tipo: " + ts.get("Var"+i).tipo + ", size: "+ts.get("Var"+i).size);
            }
        }

        public static void Agregar(String id, String categoria, String tipo, String size){
            if(size==null) ele = new Elemento(id, categoria, tipo, "0");
            else ele = new Elemento(id, categoria, tipo, size);
            int res = buscar(id);
            if(res < 0){
                ts.put("Var"+cont,ele);
                cont++;
            }
            else{
                System.out.println("La variable " +id+ " ya fue declarada anteriormente");
            }
        }

        public static int buscar(String id){
            int pos = -1;
            if(id != "int" && id != "float" && id != "char"){
            for(int i=0;i<cont;i++){
                    if(id.equals(ts.get("Var"+i).id)){
                        pos = i;               
                        System.out.println("Si fue declarada "+ts.get("Var"+i).id);
                        return pos;
                    }
                }
                if(pos==-1){
                    System.out.println("No fue declarada nunca "+id);
                }                
            }
            return pos;            
        }

        public static void validarArreglo(String id, String size){
            int pos = buscar(id);
            if(pos >= 0){
                if(Integer.parseInt(size) < Integer.parseInt(ts.get("Var"+pos).size)){
                    System.out.println("Arreglo dentro del rango");
                }else{
                    System.out.println("Arreglo"+ id +"fuera de rango");
                }
            }
        }

        public static void contarParametros(String id,int contParam2){
            int pos = buscar(id);
            if(pos >= 0){
                if(contParam2 == Integer.parseInt(ts.get("Var"+pos).size)){
                    System.out.println("Parametros correctos");
                }else{
                    System.out.println("Funcion: "+ id +" no tiene parametros correctos");
                }
            }
        }

        public static void verificarReturn(String idVar, String idFun){
            if(idFun != "int" && idFun != "float" && idFun != "char"){
                System.out.println("HOLA ENTRAS AQUI? idfun="+ idFun +"  idVar="+idVar);
                int posF = buscar(idFun);   
                boolean valid = false;
                if(posF>=0){
                    int posR = buscar(idVar);
                    if(ts.get("Var"+posF).tipo == ts.get("Var"+posR).tipo) valid = true;
                    //if(ts.get("Var"+posF).tipo == "int") valid = true;
                    else valid = false;              
                if(valid) System.out.println("Variable: "+ idVar +" y  " + idFun + " son del tipo correcto");
                else System.out.println("Variable: "+ idVar +" y  " + idFun + " no son del tipo correcto");
                }                
            }
            else{
                int posR = buscar(idVar);
                boolean valid = false;
                if(posR >= 0){
                    if(ts.get("Var"+posR).tipo == idFun) valid = true;
                    if(valid) System.out.println("Variable: "+ idVar +" y  " + idFun + " son del tipo correcto");
                    else System.out.println("Variable: "+ idVar +" y  " + idFun + " no son del tipo correcto");                    
                }
            }
        }

        public static String obtAtributo(String lex, String atributo){
            String res = "ERROR";
            if(atributo.equals("id") || atributo.equals("categoria") || atributo.equals("tipo") || atributo.equals("size")){
                int pos = buscar(lex);
                if(pos > 0){
                    if(atributo.equals("id")) return ts.get("Var" + pos).id;
                    else if(atributo.equals("categoria")) return ts.get("Var" + pos).categoria;
                    else if(atributo.equals("tipo")) return ts.get("Var" + pos).tipo;
                    else  return ts.get("Var" + pos).size;                
                }
                else System.out.println("ERROR, no se encontro el lexema");               
            }
            else System.out.println("ERROR, atributo no existente");
            return res;
        }

        public static int eliminar(String lex){
            int pos = buscar(lex);
            if(pos > 0){
                ts.remove("Var" + pos);//Eliminar valor de tabla
                return pos;
            }
            else System.out.println("ERROR, no se encontro el lexema a eliminar"); 
            return -1;
        }
    }
PARSER_END (Analizador)

TOKEN:
{
    <CLASS: "class"> {System.out.println(matchedToken.beginLine +". Encontre palabra reservada:  " + image);} |
    <STATIC: "static"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <VOID: "void"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <STRING: "String"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <INT: "int"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FLOAT: "float"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <CHAR: "char"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <INTEGER: "Integer"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <PARSEINT: "parseInt"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <IF: "if"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FOR: "for"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <TRUE: "true"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FALSE: "false"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <BOOLEAN: "boolean"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <ELSE: "else"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <WHILE: "while"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <RETURN: "return"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <IMPORT: "import"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <NULL: "null"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <LENGTH: "length"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <DO: "do"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <SWITCH: "switch"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <CASE: "case"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <BREAK: "break"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <NUMERODECIMAL : (["0"-"9"])+(".")(["0"-"9"])+> {System.out.println(matchedToken.beginLine+". Encontre numero flotante: "+image);} |  
    <CARACTER : (("'")+(["a"-"z","A"-"Z","0"-"9"])+("'")) > {System.out.println(matchedToken.beginLine+". Encontre un caracter: "+image);}
}

TOKEN:
{
    <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_"])*> {System.out.println(matchedToken.beginLine+". Encontre un identificador: "+image);} | 
    <NEGEX : "!" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MODULO : "%" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <TEXTO : ("\"") (["\u0001"-"\u0021"] | ["\u0023"-"\uffdc"] | (""))+ ("\"") > |
    <NUMENT : (["0"-"9"])(["0"-"9"])*>{System.out.println(matchedToken.beginLine+". Encontre un numero: "+image);} |
    <FINLINEA : ";">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <COMA : ",">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <GUIONES : ["_"]>{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ABRIRLLA : "{">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARLLA : "}">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} | 
    <ABRIRPAR : "(">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARPAR : ")">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ABRIRCOR : "[">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARCOR : "]">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <PUNTO : ".">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <DOSPUNTOS : ":">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MAS : "+">{System.out.println(matchedToken.beginLine+". Encontre un operador suma: "+image);} |
    <MENOS : "-">{System.out.println(matchedToken.beginLine+". Encontre un operador resta: "+image);} |
    <POR : "*">{System.out.println(matchedToken.beginLine+". Encontre un operador multiplicacion: "+image);} |
    <ENTRE : "/">{System.out.println(matchedToken.beginLine+". Encontre un operador division: "+image);} |
    <NEGAR : "~">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <COMILLAS : "\"">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);}|
    <MAYORQUE : ">">{System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);} |
    <MENORQUE : "<">{System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);} |
    <IGUAL : "=">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <OR : "|">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <AND : "&">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ALGO : "\\">{System.out.println(matchedToken.beginLine+". Encontre un comentario: "+image);} |
    <MENORIGUAL : "<=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MAYORIGUAL : ">=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <IGUALIGUAL :  "==" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <DIFERENTEDE :  "!=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);}
}

SKIP:
{
    <"//" >: Comentario |
    <"/*" >: ComentarioLineas
}

<Comentario , ComentarioLineas> MORE:
{
    <~[]>
}

<Comentario> SKIP:
{
    <"\n" | "\r" | "\r\n"> : DEFAULT
}

<ComentarioLineas> SKIP:
{
    <"*/"> : DEFAULT
}

SKIP:
{
    " " | "\t" | "\n" | "\r"
    
}

SPECIAL_TOKEN:
{
<ERROR_DECIMAL: (["0"-"9"])+(".") | (".")(["0"-"9"])+> {System.out.println("ERROR LEXICO: Numero decimal mal formulado, Linea "+matchedToken.beginLine+" "+image+".");} |
<ERROR_ID : (["0"-"9"])+(["a"-"z","A"-"Z","0"-"9"])+>  {System.out.println("ERROR LEXICO: Identificador no valido, Linea "+matchedToken.beginLine+" "+image+"."); } |
<ERROR_SIMBOLO: (~[])>{System.out.println("Error, SIMBOLO no valido (Linea: " + matchedToken.beginLine +"): " + image);}
}

void inicio() : {}
{
    (Program())+ <EOF>
}

void Program() : {}
{
    declaration_List()
}

void declaration_List() : {}
{
    declaration() declaration_ListP()
} 

void declaration_ListP() : {}
{
    (LOOKAHEAD(5)declaration() declaration_ListP())*
}

void fun_declaration() : {int tipo; String id="",categoria="",tipo2="",size="";}
{
    tipo=type_specifier()
      {
        if(tipo==1){
            tipo2="int";       
        }else if(tipo == 2){
            tipo2="float";    
        }else if(tipo == 3){
            tipo2="char";            
        }else if(tipo == 4){
            tipo2="void";  
        }
      }
     <ID>{
         id=token.image;
         categoria="Funcion";   
        }
     <ABRIRPAR> size=params() <CERRARPAR>
        { Agregar(id,categoria,tipo2, size);
        }
       
      compound_stmt(id)
}


void declaration() : {}
{
    LOOKAHEAD(3) fun_declaration() | LOOKAHEAD(3) var_declaration()
}

void var_declaration() : {int tipo;}
{
     tipo=type_specifier() <ID> var_declaration2(tipo)
}

void var_declaration2(int tipo) : {String tipo2="",size="",id="",categoria="";}
{
    (LOOKAHEAD(3){
        if(tipo==1){
            tipo2="int"; 
            size="4";
        }else if(tipo == 2){
            tipo2="float"; 
            size="8";
        }else if(tipo == 3){
            tipo2="char";
            size="12";
        }else if(tipo == 4){
            tipo2="void"; 
            size="0";
        }
        id=token.image; 
        categoria="Variable";
        Agregar(id,categoria,tipo2,size);   
    }
     <FINLINEA>  |
        {
        if(tipo==1){
            tipo2="int"; 
            
        }else if(tipo == 2){
            tipo2="float"; 
            
        }else if(tipo == 3){
            tipo2="char"; 
        }else if(tipo == 4){
            tipo2="void"; 
           
            }}
        { id= token.image; 
        categoria = "Arreglo"; 
        } <ABRIRCOR><NUMENT>{size = token.image;}<CERRARCOR><FINLINEA> {Agregar(id,categoria,tipo2,size);} |

        {
        if(tipo==1){
            tipo2="int"; 
           size="8";
        }else if(tipo == 2){
            tipo2="float"; 
            size="8";
        }else if(tipo == 3){
            tipo2="char"; 
            size="12";}
        else if(tipo == 4){
            tipo2="void"; 
            size="0";
            }}
        {Agregar(token.image, "Variable", tipo2, size);} rec_id(tipo2,size) <FINLINEA> )
}

void rec_id(String tipo2, String size) : {}
{
    (LOOKAHEAD(5)  <COMA><ID>
    {
        String id=token.image, categoria="Variable";
        Agregar(id,categoria,tipo2,size);
    } rec_id(tipo2, size))*
}


int type_specifier() : {}
{
    <INT> {return 1;}| <FLOAT>{return 2;} | <CHAR>{return 3;} | <VOID>{return 4;}
}


String params() : {int contParam=0,cont=0;}
{
    (LOOKAHEAD(5) cont=param_list(contParam) {return cont+"";}| <VOID>{return cont+"";})
}

int param_list(int contParam) : {int cont;}
{
    param(){contParam++; } cont=param_listP(contParam) {System.out.println("Contador1: "+(cont+1)); return cont+1;}
}

int param_listP(int contParam) : {int cont=0;}     
{
     <COMA> param(){contParam++;}  cont=param_listP(contParam) {System.out.println("Contador2: "+(cont+1));return cont+1;} | {} {System.out.println("Contador2: "+cont);return cont;}
}

void param() : {int tipo;}
{
    tipo = type_specifier() <ID> {param2(tipo);}
}

void param2(int tipo) : {String tipo2="",size="",id="";}
{   
   (LOOKAHEAD(5) { id = token.image;} <ABRIRCOR><CERRARCOR>{comp = false;})* 
   {      
        if(tipo==1){
            tipo2="int"; 
            size="4";
        }else if(tipo == 2){
            tipo2="float"; 
            size="8";
        }else if(tipo == 3){
            tipo2="char"; 
            size="12";}
        else if(tipo == 4){
            tipo2="void"; 
            size="0";
        }       
        if(comp) Agregar(token.image,"Variable", tipo2, size);
        else{
            Agregar(id,"Arreglo", tipo2, null);
            comp = true;
        }
   }
}

void compound_stmt(String id) : {}
{
    <ABRIRLLA> local_declarations() statement_list(id) <CERRARLLA>
}

void local_declarations() : {}
{
    local_declarationsP()
}

void local_declarationsP() : {}
{
    (LOOKAHEAD(5) var_declaration())*
}

void statement_list(String id) : {}
{
    statement_listP(id) 
}

void statement_listP(String id) : {}
{
    (LOOKAHEAD(5) statement(id) )*
}

void statement(String id) : {}
{
    expression_stmt() | compound_stmt(id) | selection_stmt(id) | iteration_stmt() | return_stmt(id)
}

void expression_stmt() : {String varID,funID="";} //Estas variables se traen para poder obtener sus ids y comparar si son del mismo tipo, eso lo hace la funcion verificarReturn, el if esta para evitar que otras cosas sean mandadas
{
    LOOKAHEAD(5) varID=var() <IGUAL> funID=expression("") {if(funID!="")verificarReturn(varID,funID); System.out.println("\n\n\nEste es varID: " + varID + " este es funID" + funID);} | expression("") <FINLINEA> | <FINLINEA>
}

void selection_stmt(String id) : {}
{
    <IF><ABRIRPAR>expression("")<CERRARPAR> statement(id) selection_stmt2(id)
}

void selection_stmt2(String id) : {}
{
    (LOOKAHEAD(5)<ELSE> statement(id))*
}

void iteration_stmt() : {}
{
    <WHILE><ABRIRPAR>expression("")<CERRARPAR>statement("")   
}

void return_stmt(String id) : {String var;}
{
    <RETURN> var=return_stmt2(id) 
}

String return_stmt2(String id) : {String rexpresion;}
{
    <FINLINEA> {return "";}|  rexpresion = expression(id) <FINLINEA> {return rexpresion;}
}

String expression(String id) : {String rvar, rsimple, rExpression;}
{
   LOOKAHEAD(5) rsimple=simple_expression(id){return rsimple;} | LOOKAHEAD(5) rvar=var() <IGUAL> rExpression = expression(id) {return rvar;}
}

String var() : {String id;}
{
     <ID>{id= token.image; buscar(id);} var2(id) {return id;}
}

void var2(String id) : {}
{
     <ABRIRCOR> expression(id) <CERRARCOR> | {}
}

String simple_expression(String id) : {String ret;}
{
    ret=additive_expression(id) simple_expression2() {return ret;}
}

void simple_expression2() : {}
{
    (LOOKAHEAD(5) relop() additive_expression(""))*
}

void relop() : {}
{
    <MENORIGUAL> | <MENORQUE> | <MAYORQUE> | <MAYORIGUAL> | <IGUALIGUAL> | <DIFERENTEDE>
}

String additive_expression(String id) : {String rterm;}
{
    rterm=term(id) additive_expressionP() {return rterm;}
}

void additive_expressionP() : {String relleno="";}
{
    (LOOKAHEAD(5)addop() term(relleno) additive_expressionP())*
}

void addop() : {}
{
    <MAS> | <MENOS>
}

String term(String id) : {String rfactor;}
{
    rfactor=factor(id) termP() {return rfactor;}
}

void termP() : {String relleno="";}
{
    (LOOKAHEAD(5) mulop() factor(relleno) termP())*
}

void mulop() : {}
{
    <POR> | <ENTRE> | <MODULO> 
}

String call() : {String id; int parametros=0;}
{
    <ID>{id= token.image; buscar(id);}<ABRIRPAR>parametros=args()<CERRARPAR> {contarParametros(id,parametros); return id;}
}

String factor(String id) : {String ret, callr, idVar;} //callr lo que hace es regresar el ID de la funcion para verificar el tipo de retorno
{
    LOOKAHEAD(20) <ABRIRPAR> expression("") <CERRARPAR> {return "";}| LOOKAHEAD(20) callr=call() {System.out.println("Valor de callr: "+ callr); return callr;}| LOOKAHEAD(20) idVar = var() {return idVar;} | <NUMENT>{String size=token.image; if(id!=""){validarArreglo(id,size);}}{return ret = "int";} | <NUMERODECIMAL>{return ret = "float";} | <CARACTER>{return ret = "char";}
}

int args() : {int cont=0,cont2=0;}
{
    cont2=arg_list(cont) {return cont2;}
}

int arg_list(int cont) : {int cont2=0;}
{
     expression("") {cont++;} cont2=arg_listP(cont) {return cont2;} | {} {return cont2;}
}

int arg_listP(int cont) : {}
{
    <COMA> expression("") {cont++;} arg_listP(cont) {return cont;} | {} {return cont;}
}


