options {
Ignore_Case = false;
STATIC=false;
DEBUG_PARSER=true;
DEBUG_LOOKAHEAD=true;
}

PARSER_BEGIN (Analizador)
/** Analizador */
    public class Analizador {
        public static void main(String[] args) throws ParseException{
            Analizador anLex = new Analizador (System.in);
            anLex.inicio();
            }
    }
PARSER_END (Analizador)

TOKEN:
{
    <CLASS: "class"> {System.out.println(matchedToken.beginLine +". Encontre palabra reservada:  " + image);} |
    <STATIC: "static"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <VOID: "void"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <MAIN: "main"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <STRING: "String"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <INT: "int"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FLOAT: "float"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <CHAR: "char"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <INTEGER: "Integer"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <PARSEINT: "parseInt"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <IF: "if"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FOR: "for"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <TRUE: "true"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <FALSE: "false"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <BOOLEAN: "boolean"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <ELSE: "else"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <WHILE: "while"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <RETURN: "return"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <IMPORT: "import"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <NULL: "null"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <LENGTH: "length"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <DO: "do"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <SWITCH: "switch"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <CASE: "case"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <BREAK: "break"> {System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);} |
    <NUMERODECIMAL : (["0"-"9"])+(".")(["0"-"9"])+> {System.out.println(matchedToken.beginLine+". Encontre numero flotante: "+image);} 
}

TOKEN:
{
    <ID: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9", "_"])*> {System.out.println(matchedToken.beginLine+". Encontre un identificador: "+image);} | 
    <NEGEX : "!" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MODULO : "%" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <TEXTO : ("\"") (["\u0001"-"\u0021"] | ["\u0023"-"\uffdc"] | (""))+ ("\"") > |
    <NUMERO : (["0"-"9"])(["0"-"9"])*>{System.out.println(matchedToken.beginLine+". Encontre un numero: "+image);} |
    <FINLINEA : ";">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <COMA : ",">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <GUIONES : ["_"]>{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ABRIRLLA : "{">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARLLA : "}">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} | 
    <ABRIRPAR : "(">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARPAR : ")">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ABRIRCOR : "[">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <CERRARCOR : "]">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <PUNTO : ".">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <DOSPUNTOS : ":">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MAS : "+">{System.out.println(matchedToken.beginLine+". Encontre un operador suma: "+image);} |
    <MENOS : "-">{System.out.println(matchedToken.beginLine+". Encontre un operador resta: "+image);} |
    <POR : "*">{System.out.println(matchedToken.beginLine+". Encontre un operador multiplicacion: "+image);} |
    <ENTRE : "/">{System.out.println(matchedToken.beginLine+". Encontre un operador division: "+image);} |
    <NEGAR : "~">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <COMILLAS : "\"">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);}|
    <MAYORQUE : ">">{System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);} |
    <MENORQUE : "<">{System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);} |
    <IGUAL : "=">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <OR : "|">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <AND : "&">{System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <ALGO : "\\">{System.out.println(matchedToken.beginLine+". Encontre un comentario: "+image);} |
    <MENORIGUAL : "<=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <MAYORIGUAL : ">=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <IGUALIGUAL :  "==" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);} |
    <DIFERENTEDE :  "!=" > {System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);}
}

SKIP:
{
    <"//" >: Comentario |
    <"/*" >: ComentarioLineas
}

<Comentario , ComentarioLineas> MORE:
{
    <~[]>
}

<Comentario> SKIP:
{
    <"\n" | "\r" | "\r\n"> : DEFAULT
}

<ComentarioLineas> SKIP:
{
    <"*/"> : DEFAULT
}

SKIP:
{
    " " | "\t" | "\n" | "\r"
    
}

SPECIAL_TOKEN:
{
<ERROR_DECIMAL: (["0"-"9"])+(".") | (".")(["0"-"9"])+> {System.out.println("ERROR LEXICO: Numero decimal mal formulado, Linea "+matchedToken.beginLine+" "+image+".");} |
<ERROR_ID : (["0"-"9"])+(["a"-"z","A"-"Z","0"-"9"])+>  {System.out.println("ERROR LEXICO: Identificador no valido, Linea "+matchedToken.beginLine+" "+image+"."); } |
<ERROR_SIMBOLO: (~[])>{System.out.println("Error, SIMBOLO no valido (Linea: " + matchedToken.beginLine +"): " + image);}
}

void inicio() : {}
{
    (Program())+ <EOF>
}

void Program() : {}
{
    declaration_List()
}

void declaration_List() : {}
{
    declaration() declaration_ListP()
}

void declaration_ListP() : {}
{
    (LOOKAHEAD(5) declaration() declaration_ListP())*
}

void declaration() : {}
{
   (LOOKAHEAD(5) var_declaration() | fun_declaration())
}

void var_declaration() : {}
{
    (LOOKAHEAD(5) type_Specifier()<ID><FINLINEA> | type_Specifier()<ID><ABRIRCOR><NUMERO><CERRARCOR><FINLINEA>)
}

void type_Specifier() : {}
{
    <INT> | <FLOAT> | <CHAR> | <VOID>
}

void fun_declaration() : {}
{
    type_Specifier() <ID><ABRIRPAR>params()<CERRARPAR>compound_stms()
}

void params() : {}
{
    param_list() | <VOID>
}

void param_list() : {}
{
    param() param_listP()
}

void param_listP() : {}
{
    (LOOKAHEAD(5) <COMA> param() param_listP())*
}

void param() : {}
{
    (LOOKAHEAD(5) type_Specifier()<ID> | type_Specifier()<ID><ABRIRCOR><CERRARCOR>)
}

void compound_stms() : {}
{
    <ABRIRLLA> local_declarations() statement_list() <CERRARLLA>
}

void local_declarations() : {}
{
    local_declarationsP()
}

void local_declarationsP() : {}
{
    (LOOKAHEAD(5) var_declaration() local_declarationsP())*
}

void statement_list() : {}
{
   statement_listP()
}

void statement_listP() : {}
{
   (LOOKAHEAD(5) statement() statement_listP())*
}

void statement() : {}
{
    expression_stmt() | compound_stms() | selection_stmt() | iteration_stmt() | return_stmt()
}

void expression_stmt() : {}
{
    expression()<FINLINEA> | <FINLINEA>
}

void selection_stmt() : {}
{
   (LOOKAHEAD(5) <IF><ABRIRPAR>expression()<CERRARPAR>statement() | <IF><ABRIRPAR>expression()<CERRARPAR>statement()<ELSE>statement() )
}

void iteration_stmt() : {}
{
    <WHILE><ABRIRPAR>expression()<CERRARPAR>statement()
}

void return_stmt() : {}
{
    (LOOKAHEAD(5) <RETURN><FINLINEA> | <RETURN>expression()<FINLINEA> )
}

void expression() : {}
{
    var()<IGUAL>expression() | simple_expression()
}

void var() : {}
{
    (LOOKAHEAD(3) <ID> | <ID> <ABRIRCOR>expression()<CERRARCOR>)
}

void simple_expression() : {}
{
    (LOOKAHEAD(5) additive_expression() relop() additive_expression() | additive_expression())
}

void relop() : {}
{
   (LOOKAHEAD(3) <MENORQUE><IGUAL> | <MENORQUE> | <MAYORQUE> | <MAYORQUE><IGUAL> | <IGUAL><IGUAL> | <DIFERENTEDE> )
}

void additive_expression() : {}
{
    term() additive_expressionP()
}

void additive_expressionP() : {}
{
    (LOOKAHEAD(5) addop() term() additive_expressionP())*
}

void addop() : {}
{
    <MAS> | <MENOS> 
}

void term() : {}
{
    factor()termP() 
}

void termP() : {}
{
   mulop() factor() termP()
}

void mulop() : {}
{
    <POR> | <ENTRE> | <MODULO>
}

void factor() : {}
{
    (LOOKAHEAD(3) <ABRIRPAR>expression()<CERRARPAR> | var() | call() | <NUMERO> | <NUMERODECIMAL> | <CHAR>)
}

void call() : {}
{
    <ID><ABRIRPAR>args()<CERRARPAR> 
}

void args() : {}
{
    (LOOKAHEAD(5) args_list())*
}

void args_list() : {}
{
    expression() args_listP()
}

void args_listP() : {}
{
    (LOOKAHEAD(5) <COMA> expression() args_listP())*
}