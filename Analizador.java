/* Generated By:JavaCC: Do not edit this line. Analizador.java */
/** Analizador */

import java.util.*;
    public class Analizador implements AnalizadorConstants {
        static Hashtable<String, Elemento> ts = new Hashtable<String, Elemento>();
        static int cont=0;
        static  Elemento ele;
        static boolean comp = true;
        static String vAux;

        public static void main(String[] args) throws ParseException{
            Analizador anLex = new Analizador (System.in);
            anLex.inicio();
            for(int i=0;i<cont;i++){
                System.out.println("Tabla: "+i+", ID= "+ts.get("Var"+i).id+", Categoria: "+ts.get("Var"+i).categoria);
            }
        }

        public static void Agregar(String ID, String tipo){
            ele = new Elemento(ID,tipo);
            ele.id=ID;
            ele.categoria=tipo;
            ts.put("Var"+cont,ele);
            cont++;
        }

        public static int buscar(String lex){
            int pos = -1;
            for(int i=0;i<cont;i++){
                if(lex.equals(ts.get("Var"+i).id)){
                    pos = i;
                    return pos;
                }
            }
            return pos;
        }

        public static String obtAtributo(String lex, String atributo){
            String res = "ERROR";
            if(atributo.equals("id") || atributo.equals("categoria") || atributo.equals("tipo") || atributo.equals("size")){
                int pos = buscar(lex);
                if(pos > 0){
                    if(atributo.equals("id")) return ts.get("Var" + pos).id;
                    else if(atributo.equals("categoria")) return ts.get("Var" + pos).categoria;
                    else if(atributo.equals("tipo")) return ts.get("Var" + pos).tipo;
                    else  return ts.get("Var" + pos).size;
                }
                else System.out.println("ERROR, no se encontro el lexema");
            }
            else System.out.println("ERROR, atributo no existente");
            return res;
        }

        public static int eliminar(String lex){
            int pos = buscar(lex);
            if(pos > 0){
                ts.remove("Var" + pos);//Eliminar valor de tabla
                return pos;
            }
            else System.out.println("ERROR, no se encontro el lexema a eliminar");
            return -1;
        }

  final public void inicio() throws ParseException {
    label_1:
    while (true) {
      Program();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case CHAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void Program() throws ParseException {
    declaration_List();
  }

  final public void declaration_List() throws ParseException {
    declaration();
    declaration_ListP();
  }

  final public void declaration_ListP() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_1(5)) {
        ;
      } else {
        break label_2;
      }
      declaration();
      declaration_ListP();
    }
  }

  final public void fun_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
                          String x=token.image, tipo="Funcion";Agregar(x,tipo);
    jj_consume_token(ABRIRPAR);
    params();
    jj_consume_token(CERRARPAR);
    compound_stmt();
  }

  final public void declaration() throws ParseException {
    if (jj_2_2(3)) {
      fun_declaration();
    } else if (jj_2_3(3)) {
      var_declaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void var_declaration() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
    var_declaration2();
  }

  final public void var_declaration2() throws ParseException {
    if (jj_2_4(3)) {
                   String x=token.image, tipo="Variable";Agregar(x,tipo);
      jj_consume_token(FINLINEA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRIRCOR:
                                                                                          String x = token.image, tipo = "Arreglo"; Agregar(x, tipo);
        jj_consume_token(ABRIRCOR);
        jj_consume_token(NUMENT);
        jj_consume_token(CERRARCOR);
        jj_consume_token(FINLINEA);
        break;
      case FINLINEA:
      case COMA:
                                                                                                                                                                                                  Agregar(token.image, "Variable");
        rec_id();
        jj_consume_token(FINLINEA);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void rec_id() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_5(5)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(COMA);
      jj_consume_token(ID);
                              String x=token.image, tipo="Variable";Agregar(x,tipo);
      rec_id();
    }
  }

  final public void type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void params() throws ParseException {
    if (jj_2_6(5)) {
      param_list();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void param_list() throws ParseException {
    param();
    param_listP();
  }

  final public void param_listP() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_7(5)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMA);
      param();
      param_listP();
    }
  }

  final public void param() throws ParseException {
    type_specifier();
    jj_consume_token(ID);
    param2();
  }

  final public void param2() throws ParseException {
    label_5:
    while (true) {
      if (jj_2_8(5)) {
        ;
      } else {
        break label_5;
      }
                  vAux = token.image; System.out.println("hola, tengo un " + token.image );
      jj_consume_token(ABRIRCOR);
      jj_consume_token(CERRARCOR);
                                                                                                                   comp = false;
    }
        if(comp) Agregar(token.image,"Variable");
        else{
            Agregar(vAux,"Arreglo");
            comp = true;
        }
  }

  final public void compound_stmt() throws ParseException {
    jj_consume_token(ABRIRLLA);
    local_declarations();
    statement_list();
    jj_consume_token(CERRARLLA);
  }

  final public void local_declarations() throws ParseException {
    local_declarationsP();
  }

  final public void local_declarationsP() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_9(5)) {
        ;
      } else {
        break label_6;
      }
      var_declaration();
    }
  }

  final public void statement_list() throws ParseException {
    statement_listP();
  }

  final public void statement_listP() throws ParseException {
    label_7:
    while (true) {
      if (jj_2_10(5)) {
        ;
      } else {
        break label_7;
      }
      statement();
    }
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
    case NUMERODECIMAL:
    case ID:
    case NUMENT:
    case FINLINEA:
    case ABRIRPAR:
      expression_stmt();
      break;
    case ABRIRLLA:
      compound_stmt();
      break;
    case IF:
      selection_stmt();
      break;
    case WHILE:
      iteration_stmt();
      break;
    case RETURN:
      return_stmt();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expression_stmt() throws ParseException {
    if (jj_2_11(5)) {
      var();
      jj_consume_token(IGUAL);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case NUMERODECIMAL:
      case ID:
      case NUMENT:
      case ABRIRPAR:
        expression();
        jj_consume_token(FINLINEA);
        break;
      case FINLINEA:
        jj_consume_token(FINLINEA);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void selection_stmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRIRPAR);
    expression();
    jj_consume_token(CERRARPAR);
    statement();
    selection_stmt2();
  }

  final public void selection_stmt2() throws ParseException {
    label_8:
    while (true) {
      if (jj_2_12(5)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(ELSE);
      statement();
    }
  }

  final public void iteration_stmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRIRPAR);
    expression();
    jj_consume_token(CERRARPAR);
    statement();
  }

  final public void return_stmt() throws ParseException {
    jj_consume_token(RETURN);
    return_stmt2();
  }

  final public void return_stmt2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINLINEA:
      jj_consume_token(FINLINEA);
      break;
    case CHAR:
    case NUMERODECIMAL:
    case ID:
    case NUMENT:
    case ABRIRPAR:
      expression();
      jj_consume_token(FINLINEA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void expression() throws ParseException {
    if (jj_2_13(5)) {
      simple_expression();
    } else if (jj_2_14(5)) {
      var();
      jj_consume_token(IGUAL);
      expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void var() throws ParseException {
    jj_consume_token(ID);
    var2();
  }

  final public void var2() throws ParseException {
    label_9:
    while (true) {
      if (jj_2_15(5)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(ABRIRCOR);
      expression();
      jj_consume_token(CERRARCOR);
    }
  }

  final public void simple_expression() throws ParseException {
    additive_expression();
    simple_expression2();
  }

  final public void simple_expression2() throws ParseException {
    label_10:
    while (true) {
      if (jj_2_16(5)) {
        ;
      } else {
        break label_10;
      }
      relop();
      additive_expression();
    }
  }

  final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENORIGUAL:
      jj_consume_token(MENORIGUAL);
      break;
    case MENORQUE:
      jj_consume_token(MENORQUE);
      break;
    case MAYORQUE:
      jj_consume_token(MAYORQUE);
      break;
    case MAYORIGUAL:
      jj_consume_token(MAYORIGUAL);
      break;
    case IGUALIGUAL:
      jj_consume_token(IGUALIGUAL);
      break;
    case DIFERENTEDE:
      jj_consume_token(DIFERENTEDE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void additive_expression() throws ParseException {
    term();
    additive_expressionP();
  }

  final public void additive_expressionP() throws ParseException {
    label_11:
    while (true) {
      if (jj_2_17(5)) {
        ;
      } else {
        break label_11;
      }
      addop();
      term();
      additive_expressionP();
    }
  }

  final public void addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      jj_consume_token(MAS);
      break;
    case MENOS:
      jj_consume_token(MENOS);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void term() throws ParseException {
    factor();
    termP();
  }

  final public void termP() throws ParseException {
    label_12:
    while (true) {
      if (jj_2_18(5)) {
        ;
      } else {
        break label_12;
      }
      mulop();
      factor();
      termP();
    }
  }

  final public void mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      jj_consume_token(POR);
      break;
    case ENTRE:
      jj_consume_token(ENTRE);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void call() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ABRIRPAR);
    args();
    jj_consume_token(CERRARPAR);
  }

  final public void factor() throws ParseException {
    if (jj_2_19(20)) {
      jj_consume_token(ABRIRPAR);
      expression();
      jj_consume_token(CERRARPAR);
    } else if (jj_2_20(20)) {
      call();
    } else if (jj_2_21(20)) {
      var();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMENT:
        jj_consume_token(NUMENT);
        break;
      case NUMERODECIMAL:
        jj_consume_token(NUMERODECIMAL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void args() throws ParseException {
    arg_list();
  }

  final public void arg_list() throws ParseException {
    label_13:
    while (true) {
      if (jj_2_22(5)) {
        ;
      } else {
        break label_13;
      }
      expression();
      arg_listP();
    }
  }

  final public void arg_listP() throws ParseException {
    label_14:
    while (true) {
      if (jj_2_23(5)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(COMA);
      expression();
      arg_listP();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_33()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_scan_token(NUMENT)) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(ABRIRLLA)) return true;
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(CERRARLLA)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_25()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_56()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AnalizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe8,0x80000000,0xe8,0x8,0xc6030480,0xc6000080,0xc6000080,0x0,0x0,0x10000000,0x42000080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x41,0x0,0x0,0x14,0x10,0x10,0x3c30000,0xc00,0x3000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[23];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 23; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
