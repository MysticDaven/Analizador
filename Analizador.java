/* Generated By:JavaCC: Do not edit this line. Analizador.java */
/** Analizador */
    public class Analizador implements AnalizadorConstants {
        public static void main(String[] args) throws ParseException{
            Analizador anLex = new Analizador (System.in);
            anLex.inicio();
            }

  final public void inicio() throws ParseException {
    trace_call("inicio");
    try {
      label_1:
      while (true) {
        Program();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case INT:
        case FLOAT:
        case CHAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    } finally {
      trace_return("inicio");
    }
  }

  final public void Program() throws ParseException {
    trace_call("Program");
    try {
      declaration_List();
    } finally {
      trace_return("Program");
    }
  }

  final public void declaration_List() throws ParseException {
    trace_call("declaration_List");
    try {
      declaration();
      declaration_ListP();
    } finally {
      trace_return("declaration_List");
    }
  }

  final public void declaration_ListP() throws ParseException {
    trace_call("declaration_ListP");
    try {
      label_2:
      while (true) {
        if (jj_2_1(5)) {
          ;
        } else {
          break label_2;
        }
        declaration();
        declaration_ListP();
      }
    } finally {
      trace_return("declaration_ListP");
    }
  }

  final public void fun_declaration() throws ParseException {
    trace_call("fun_declaration");
    try {
      type_specifier();
      jj_consume_token(ID);
      jj_consume_token(ABRIRPAR);
      params();
      jj_consume_token(CERRARPAR);
      compound_stmt();
    } finally {
      trace_return("fun_declaration");
    }
  }

  final public void declaration() throws ParseException {
    trace_call("declaration");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case INT:
      case FLOAT:
      case CHAR:
        var_declaration();
        break;
        fun_declaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaration");
    }
  }

  final public void var_declaration() throws ParseException {
    trace_call("var_declaration");
    try {
      type_specifier();
      jj_consume_token(ID);
      var_declaration2();
    } finally {
      trace_return("var_declaration");
    }
  }

  final public void var_declaration2() throws ParseException {
    trace_call("var_declaration2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINLINEA:
        jj_consume_token(FINLINEA);
        break;
      case ABRIRCOR:
        jj_consume_token(ABRIRCOR);
        jj_consume_token(NUMENT);
        jj_consume_token(CERRARCOR);
        jj_consume_token(FINLINEA);
        break;
      case COMA:
        rec_id();
        jj_consume_token(FINLINEA);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("var_declaration2");
    }
  }

  final public void rec_id() throws ParseException {
    trace_call("rec_id");
    try {
      label_3:
      while (true) {
        if (jj_2_2(5)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMA);
        jj_consume_token(ID);
        rec_id();
      }
    } finally {
      trace_return("rec_id");
    }
  }

  final public void type_specifier() throws ParseException {
    trace_call("type_specifier");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type_specifier");
    }
  }

  final public void params() throws ParseException {
    trace_call("params");
    try {
      if (jj_2_3(5)) {
        param_list();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          jj_consume_token(VOID);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("params");
    }
  }

  final public void param_list() throws ParseException {
    trace_call("param_list");
    try {
      param();
      param_listP();
    } finally {
      trace_return("param_list");
    }
  }

  final public void param_listP() throws ParseException {
    trace_call("param_listP");
    try {
      label_4:
      while (true) {
        if (jj_2_4(5)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMA);
        param();
        param_listP();
      }
    } finally {
      trace_return("param_listP");
    }
  }

  final public void param() throws ParseException {
    trace_call("param");
    try {
      type_specifier();
      jj_consume_token(ID);
      param2();
    } finally {
      trace_return("param");
    }
  }

  final public void param2() throws ParseException {
    trace_call("param2");
    try {
      label_5:
      while (true) {
        if (jj_2_5(5)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(ABRIRCOR);
        jj_consume_token(CERRARCOR);
      }
    } finally {
      trace_return("param2");
    }
  }

  final public void compound_stmt() throws ParseException {
    trace_call("compound_stmt");
    try {
      jj_consume_token(ABRIRLLA);
      local_declarations();
      statement_list();
      jj_consume_token(CERRARLLA);
    } finally {
      trace_return("compound_stmt");
    }
  }

  final public void local_declarations() throws ParseException {
    trace_call("local_declarations");
    try {
      local_declarationsP();
    } finally {
      trace_return("local_declarations");
    }
  }

  final public void local_declarationsP() throws ParseException {
    trace_call("local_declarationsP");
    try {
      label_6:
      while (true) {
        if (jj_2_6(5)) {
          ;
        } else {
          break label_6;
        }
        var_declaration();
      }
    } finally {
      trace_return("local_declarationsP");
    }
  }

  final public void statement_list() throws ParseException {
    trace_call("statement_list");
    try {
      statement_listP();
    } finally {
      trace_return("statement_list");
    }
  }

  final public void statement_listP() throws ParseException {
    trace_call("statement_listP");
    try {
      label_7:
      while (true) {
        if (jj_2_7(5)) {
          ;
        } else {
          break label_7;
        }
        statement();
      }
    } finally {
      trace_return("statement_listP");
    }
  }

  final public void statement() throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case NUMERODECIMAL:
      case ID:
      case NUMENT:
      case FINLINEA:
      case ABRIRPAR:
        expression_stmt();
        break;
      case ABRIRLLA:
        compound_stmt();
        break;
      case IF:
        selection_stmt();
        break;
      case WHILE:
        iteration_stmt();
        break;
      case RETURN:
        return_stmt();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

  final public void expression_stmt() throws ParseException {
    trace_call("expression_stmt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
      case NUMERODECIMAL:
      case ID:
      case NUMENT:
      case ABRIRPAR:
        expression();
        jj_consume_token(FINLINEA);
        break;
      case FINLINEA:
        jj_consume_token(FINLINEA);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expression_stmt");
    }
  }

  final public void selection_stmt() throws ParseException {
    trace_call("selection_stmt");
    try {
      jj_consume_token(IF);
      jj_consume_token(ABRIRPAR);
      expression();
      jj_consume_token(CERRARPAR);
      statement();
      selection_stmt2();
    } finally {
      trace_return("selection_stmt");
    }
  }

  final public void selection_stmt2() throws ParseException {
    trace_call("selection_stmt2");
    try {
      label_8:
      while (true) {
        if (jj_2_8(5)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(ELSE);
        statement();
      }
    } finally {
      trace_return("selection_stmt2");
    }
  }

  final public void iteration_stmt() throws ParseException {
    trace_call("iteration_stmt");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(ABRIRPAR);
      expression();
      jj_consume_token(CERRARPAR);
      statement();
    } finally {
      trace_return("iteration_stmt");
    }
  }

  final public void return_stmt() throws ParseException {
    trace_call("return_stmt");
    try {
      jj_consume_token(RETURN);
      return_stmt2();
    } finally {
      trace_return("return_stmt");
    }
  }

  final public void return_stmt2() throws ParseException {
    trace_call("return_stmt2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINLINEA:
        jj_consume_token(FINLINEA);
        break;
      case CHAR:
      case NUMERODECIMAL:
      case ID:
      case NUMENT:
      case ABRIRPAR:
        expression();
        jj_consume_token(FINLINEA);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("return_stmt2");
    }
  }

  final public void expression() throws ParseException {
    trace_call("expression");
    try {
      if (jj_2_9(5)) {
        var();
        jj_consume_token(IGUAL);
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHAR:
        case NUMERODECIMAL:
        case ID:
        case NUMENT:
        case ABRIRPAR:
          simple_expression();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void var() throws ParseException {
    trace_call("var");
    try {
      jj_consume_token(ID);
      var2();
    } finally {
      trace_return("var");
    }
  }

  final public void var2() throws ParseException {
    trace_call("var2");
    try {
      label_9:
      while (true) {
        if (jj_2_10(5)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(ABRIRCOR);
        expression();
        jj_consume_token(CERRARCOR);
      }
    } finally {
      trace_return("var2");
    }
  }

  final public void simple_expression() throws ParseException {
    trace_call("simple_expression");
    try {
      additive_expression();
      simple_expression2();
    } finally {
      trace_return("simple_expression");
    }
  }

  final public void simple_expression2() throws ParseException {
    trace_call("simple_expression2");
    try {
      label_10:
      while (true) {
        if (jj_2_11(5)) {
          ;
        } else {
          break label_10;
        }
        relop();
        additive_expression();
      }
    } finally {
      trace_return("simple_expression2");
    }
  }

  final public void relop() throws ParseException {
    trace_call("relop");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        break;
      case MENORQUE:
        jj_consume_token(MENORQUE);
        break;
      case MAYORQUE:
        jj_consume_token(MAYORQUE);
        break;
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
        break;
      case IGUALIGUAL:
        jj_consume_token(IGUALIGUAL);
        break;
      case DIFERENTEDE:
        jj_consume_token(DIFERENTEDE);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("relop");
    }
  }

  final public void additive_expression() throws ParseException {
    trace_call("additive_expression");
    try {
      term();
      additive_expressionP();
    } finally {
      trace_return("additive_expression");
    }
  }

  final public void additive_expressionP() throws ParseException {
    trace_call("additive_expressionP");
    try {
      label_11:
      while (true) {
        if (jj_2_12(5)) {
          ;
        } else {
          break label_11;
        }
        addop();
        term();
        additive_expressionP();
      }
    } finally {
      trace_return("additive_expressionP");
    }
  }

  final public void addop() throws ParseException {
    trace_call("addop");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("addop");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
      factor();
      termP();
    } finally {
      trace_return("term");
    }
  }

  final public void termP() throws ParseException {
    trace_call("termP");
    try {
      label_12:
      while (true) {
        if (jj_2_13(5)) {
          ;
        } else {
          break label_12;
        }
        mulop();
        factor();
        termP();
      }
    } finally {
      trace_return("termP");
    }
  }

  final public void mulop() throws ParseException {
    trace_call("mulop");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        break;
      case ENTRE:
        jj_consume_token(ENTRE);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mulop");
    }
  }

  final public void call() throws ParseException {
    trace_call("call");
    try {
      jj_consume_token(ID);
      jj_consume_token(ABRIRPAR);
      args();
      jj_consume_token(CERRARPAR);
    } finally {
      trace_return("call");
    }
  }

  final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRIRPAR:
        jj_consume_token(ABRIRPAR);
        expression();
        jj_consume_token(CERRARPAR);
        break;
      case ID:
        var();
        break;
        call();
        break;
      case NUMENT:
        jj_consume_token(NUMENT);
        break;
      case NUMERODECIMAL:
        jj_consume_token(NUMERODECIMAL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public void args() throws ParseException {
    trace_call("args");
    try {
      label_13:
      while (true) {
        if (jj_2_14(5)) {
          ;
        } else {
          break label_13;
        }
        arg_list();
      }
    } finally {
      trace_return("args");
    }
  }

  final public void arg_list() throws ParseException {
    trace_call("arg_list");
    try {
      expression();
      arg_listP();
    } finally {
      trace_return("arg_list");
    }
  }

  final public void arg_listP() throws ParseException {
    trace_call("arg_listP");
    try {
      label_14:
      while (true) {
        if (jj_2_15(5)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(COMA);
        expression();
        arg_listP();
      }
    } finally {
      trace_return("arg_listP");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_19()) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (!jj_rescan) trace_call("param_listP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("param_listP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_18() {
    if (!jj_rescan) trace_call("param_list(LOOKING AHEAD...)");
    if (jj_3R_19()) { if (!jj_rescan) trace_return("param_list(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_20()) { if (!jj_rescan) trace_return("param_list(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("param_list(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (!jj_rescan) trace_call("params(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) { if (!jj_rescan) trace_return("params(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("params(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_48() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_scan_token(NUMENT)) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (!jj_rescan) trace_call("type_specifier(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) { if (!jj_rescan) trace_return("type_specifier(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    { if (!jj_rescan) trace_return("type_specifier(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (!jj_rescan) trace_call("rec_id(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("rec_id(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_39() {
    if (!jj_rescan) trace_call("var_declaration2(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) { if (!jj_rescan) trace_return("var_declaration2(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("var_declaration2(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_21() {
    if (!jj_rescan) trace_call("var_declaration(LOOKING AHEAD...)");
    if (jj_3R_37()) { if (!jj_rescan) trace_return("var_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("var_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_39()) { if (!jj_rescan) trace_return("var_declaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("var_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (!jj_rescan) trace_call("arg_listP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("arg_listP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_15() {
    if (!jj_rescan) trace_call("declaration(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) { if (!jj_rescan) trace_return("declaration(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_35() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (!jj_rescan) trace_call("arg_list(LOOKING AHEAD...)");
    if (jj_3R_24()) { if (!jj_rescan) trace_return("arg_list(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_34()) { if (!jj_rescan) trace_return("arg_list(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("arg_list(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_50() {
    if (!jj_rescan) trace_call("fun_declaration(LOOKING AHEAD...)");
    if (jj_3R_37()) { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ABRIRPAR)) { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_60()) { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CERRARPAR)) { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("fun_declaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_14() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (!jj_rescan) trace_call("args(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("args(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (!jj_rescan) trace_call("declaration_ListP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("declaration_ListP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_31() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(ABRIRPAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CERRARPAR)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (!jj_rescan) trace_call("call(LOOKING AHEAD...)");
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("call(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ABRIRPAR)) { if (!jj_rescan) trace_return("call(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_66()) { if (!jj_rescan) trace_return("call(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CERRARPAR)) { if (!jj_rescan) trace_return("call(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("call(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_30() {
    if (!jj_rescan) trace_call("mulop(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) { if (!jj_rescan) trace_return("mulop(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("mulop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_13() {
    if (jj_3R_30()) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (!jj_rescan) trace_call("termP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("termP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_28() {
    if (!jj_rescan) trace_call("term(LOOKING AHEAD...)");
    if (jj_3R_31()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_32()) { if (!jj_rescan) trace_return("term(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("term(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_46() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (!jj_rescan) trace_call("addop(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) { if (!jj_rescan) trace_return("addop(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("addop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_12() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (!jj_rescan) trace_call("additive_expressionP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("additive_expressionP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_26() {
    if (!jj_rescan) trace_call("additive_expression(LOOKING AHEAD...)");
    if (jj_3R_28()) { if (!jj_rescan) trace_return("additive_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_29()) { if (!jj_rescan) trace_return("additive_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("additive_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("relop(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) { if (!jj_rescan) trace_return("relop(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("relop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_43() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (!jj_rescan) trace_call("simple_expression2(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("simple_expression2(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_58() {
    if (!jj_rescan) trace_call("simple_expression(LOOKING AHEAD...)");
    if (jj_3R_26()) { if (!jj_rescan) trace_return("simple_expression(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_65()) { if (!jj_rescan) trace_return("simple_expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("simple_expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_10() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (!jj_rescan) trace_call("var2(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("var2(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_69() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (!jj_rescan) trace_call("var(LOOKING AHEAD...)");
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("var(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_45()) { if (!jj_rescan) trace_return("var(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("var(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_42() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64() {
    if (!jj_rescan) trace_call("return_stmt2(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_69()) { if (!jj_rescan) trace_return("return_stmt2(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("return_stmt2(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_57() {
    if (!jj_rescan) trace_call("return_stmt(LOOKING AHEAD...)");
    if (jj_scan_token(RETURN)) { if (!jj_rescan) trace_return("return_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_64()) { if (!jj_rescan) trace_return("return_stmt(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("return_stmt(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_41() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (!jj_rescan) trace_call("iteration_stmt(LOOKING AHEAD...)");
    if (jj_scan_token(WHILE)) { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ABRIRPAR)) { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_24()) { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CERRARPAR)) { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_22()) { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("iteration_stmt(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (!jj_rescan) trace_call("selection_stmt(LOOKING AHEAD...)");
    if (jj_scan_token(IF)) { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ABRIRPAR)) { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_24()) { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CERRARPAR)) { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_22()) { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("selection_stmt(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_53() {
    if (!jj_rescan) trace_call("expression_stmt(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) { if (!jj_rescan) trace_return("expression_stmt(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("expression_stmt(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_61() {
    if (jj_3R_24()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (!jj_rescan) trace_call("statement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) { if (!jj_rescan) trace_return("statement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("statement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (!jj_rescan) trace_call("statement_listP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("statement_listP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_63() {
    if (!jj_rescan) trace_call("statement_list(LOOKING AHEAD...)");
    if (jj_3R_68()) { if (!jj_rescan) trace_return("statement_list(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("statement_list(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_52() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(FINLINEA)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (!jj_rescan) trace_call("local_declarationsP(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("local_declarationsP(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_62() {
    if (!jj_rescan) trace_call("local_declarations(LOOKING AHEAD...)");
    if (jj_3R_67()) { if (!jj_rescan) trace_return("local_declarations(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("local_declarations(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_54() {
    if (!jj_rescan) trace_call("compound_stmt(LOOKING AHEAD...)");
    if (jj_scan_token(ABRIRLLA)) { if (!jj_rescan) trace_return("compound_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_62()) { if (!jj_rescan) trace_return("compound_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_63()) { if (!jj_rescan) trace_return("compound_stmt(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(CERRARLLA)) { if (!jj_rescan) trace_return("compound_stmt(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("compound_stmt(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ABRIRCOR)) return true;
    if (jj_scan_token(CERRARCOR)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (!jj_rescan) trace_call("param2(LOOKING AHEAD...)");
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("param2(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_19() {
    if (!jj_rescan) trace_call("param(LOOKING AHEAD...)");
    if (jj_3R_37()) { if (!jj_rescan) trace_return("param(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ID)) { if (!jj_rescan) trace_return("param(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_38()) { if (!jj_rescan) trace_return("param(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("param(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  /** Generated Token Manager. */
  public AnalizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c8,0x1c8,0x0,0x1c8,0x8,0x8c060900,0x8c000100,0x8c000100,0x8c000100,0x0,0x0,0x20000000,0x8c000100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x83,0x0,0x0,0x29,0x21,0x21,0x20,0x7860000,0x1800,0x6000,0x20,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[71];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 71; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    }
