/* Generated By:JavaCC: Do not edit this line. AnalizadorTokenManager.java */

/** Token Manager. */
public class AnalizadorTokenManager implements AnalizadorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000000000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000L) != 0L)
            return 7;
         if ((active0 & 0x1fffffeL) != 0L)
         {
            jjmatchedKind = 26;
            return 1;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x200400L) != 0L)
            return 1;
         if ((active0 & 0x1dffbfeL) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1dff3deL) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x820L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x1576356L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x889088L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x564314L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x1012042L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x4300L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x560014L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x4100L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 47, 17);
      case 37:
         return jjStopAtPos(0, 28);
      case 38:
         return jjStopAtPos(0, 52);
      case 40:
         return jjStopAtPos(0, 36);
      case 41:
         return jjStopAtPos(0, 37);
      case 42:
         return jjStopAtPos(0, 44);
      case 43:
         return jjStopAtPos(0, 42);
      case 44:
         return jjStopAtPos(0, 32);
      case 45:
         return jjStopAtPos(0, 43);
      case 46:
         return jjStartNfaWithStates_0(0, 40, 7);
      case 47:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L);
      case 58:
         return jjStopAtPos(0, 41);
      case 59:
         return jjStopAtPos(0, 31);
      case 60:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 61:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 62:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 91:
         return jjStopAtPos(0, 38);
      case 92:
         return jjStopAtPos(0, 53);
      case 93:
         return jjStopAtPos(0, 39);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1004000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800082L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2840L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40420L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400004L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 123:
         return jjStopAtPos(0, 34);
      case 124:
         return jjStopAtPos(0, 51);
      case 125:
         return jjStopAtPos(0, 35);
      case 126:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 47:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x802200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10080L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8042L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x120L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x4808L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x14L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x86L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x410008L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4040L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x210L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x808000L);
      case 116:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x20100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000040L);
      case 100:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 1);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x14000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2202L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400004L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4200L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000L);
      case 115:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 1);
         break;
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 99:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 103:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 1);
         break;
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         break;
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 1);
         break;
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 17:
                  if ((0xfffffffbfffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  else if (curChar == 34)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbfffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(0, 6);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46 && kind > 67)
                     kind = 67;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjCheckNAdd(16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 95)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  break;
               case 17:
               case 3:
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 95 && kind > 33)
                     kind = 33;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 61)
                     kind = 61;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   9, 10, 12, 13, 14, 15, 16, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\143\154\141\163\163", "\163\164\141\164\151\143", "\166\157\151\144", 
"\123\164\162\151\156\147", "\151\156\164", "\146\154\157\141\164", "\143\150\141\162", 
"\111\156\164\145\147\145\162", "\160\141\162\163\145\111\156\164", "\151\146", "\146\157\162", 
"\164\162\165\145", "\146\141\154\163\145", "\142\157\157\154\145\141\156", "\145\154\163\145", 
"\167\150\151\154\145", "\162\145\164\165\162\156", "\151\155\160\157\162\164", "\156\165\154\154", 
"\154\145\156\147\164\150", "\144\157", "\163\167\151\164\143\150", "\143\141\163\145", 
"\142\162\145\141\153", null, null, "\41", "\45", null, null, "\73", "\54", null, "\173", "\175", 
"\50", "\51", "\133", "\135", "\56", "\72", "\53", "\55", "\52", "\57", "\176", 
"\42", "\76", "\74", "\75", "\174", "\46", "\134", "\74\75", "\76\75", "\75\75", 
"\41\75", null, null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "Comentario", 
   "ComentarioLineas", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xec00000000000000L, 0x3fL, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x38L, 
};
static final long[] jjtoMore = {
   0x1000000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[17];
private final int[] jjstateSet = new int[34];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
/** Constructor. */
public AnalizadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AnalizadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 69)
         {
            jjmatchedKind = 69;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 60)
         {
            jjmatchedKind = 60;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 60)
         {
            jjmatchedKind = 60;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 67 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println("ERROR LEXICO: Numero decimal mal formulado, Linea "+matchedToken.beginLine+" "+image+".");
         break;
      case 68 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        System.out.println("ERROR LEXICO: Identificador no valido, Linea "+matchedToken.beginLine+" "+image+".");
         break;
      case 69 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("Error, SIMBOLO no valido (Linea: " + matchedToken.beginLine +"): " + image);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                      System.out.println(matchedToken.beginLine +". Encontre palabra reservada:  " + image);
         break;
      case 2 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 4 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 5 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                  System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                      System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                          System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                            System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                  System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                      System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                          System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                      System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                        System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                    System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                      System.out.println(matchedToken.beginLine+". Encontre palabra reservada: "+image);
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println(matchedToken.beginLine+". Encontre numero flotante: "+image);
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              System.out.println(matchedToken.beginLine+". Encontre un identificador: "+image);
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                    System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                     System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.println(matchedToken.beginLine+". Encontre un numero: "+image);
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                     System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                 System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                     System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                     System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                     System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                  System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                System.out.println(matchedToken.beginLine+". Encontre un operador suma: "+image);
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                  System.out.println(matchedToken.beginLine+". Encontre un operador resta: "+image);
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                System.out.println(matchedToken.beginLine+". Encontre un operador multiplicacion: "+image);
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                  System.out.println(matchedToken.beginLine+". Encontre un operador division: "+image);
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                  System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 47 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                      System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                     System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[49]);
        lengthOfMatch = jjstrLiteralImages[49].length();
                     System.out.println(matchedToken.beginLine+". Encontre un operador logico: "+image);
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
                  System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[51]);
        lengthOfMatch = jjstrLiteralImages[51].length();
               System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 52 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
                System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[53]);
        lengthOfMatch = jjstrLiteralImages[53].length();
                  System.out.println(matchedToken.beginLine+". Encontre un comentario: "+image);
         break;
      case 54 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[54]);
        lengthOfMatch = jjstrLiteralImages[54].length();
                          System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                          System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                           System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                            System.out.println(matchedToken.beginLine+". Encontre un simbolo: "+image);
         break;
      default : 
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
